clear all, close all, clc

n = 8; %number of neurons/basis functions
R = 8; %range of sample
% Generate randomly weights and biases and split into two
b = R*rand(2*n,1);
w = R*rand(2*n,1);
b1 = b(1:n);b2 = b(n+1:2*n);
w1 = w(1:n);w2 = w(n+1:2*n);

L = pi; % size of the interval
delta = L/8; % overlap
% Build matrices as in the Maple sheet
for i=1:n
    for j=1:n
        wij = w1(i)-w1(j);
        vij = w1(i)+w1(j);
        bij = b1(i)-b1(j);
        cij = b1(i)+b1(j);
        if wij ~= 0
            M1(i,j) = -(sin(1/2*vij*L+vij*delta+cij)*wij-sin(1/2*wij*L+wij*delta+bij)*vij...
                - sin(cij)*wij + sin(bij)*vij)/(vij*wij);
            M1t(i,j) = -1/(delta^2*wij^3*vij^3)*...
                (2*(2*sin(1/2*wij*L-wij*delta + bij)*delta^2*vij^3*wij^2 -...
                2*sin(1/2*vij*L-vij*delta + cij)*delta^2*vij^2*wij^3 - ...
                2*cos(1/2*wij*L-wij*delta + bij)*delta*vij^3*wij + ...
                2*cos(1/2*vij*L-vij*delta + cij)*delta*vij*wij^3 + ...
                vij^3*sin(1/2*wij*L+wij*delta + bij)-sin(1/2*vij*L+vij*delta+cij)*wij^3 -...
                vij^3*sin(1/2*wij*L-wij*delta + bij)+sin(1/2*vij*L-vij*delta+cij)*wij^3));
        else
            M1(i,j)=(cos(bij)*w1(i)*L+2*cos(bij)*w1(i)*delta+...
                sin(cij)-sin(L*w1(i)+2*delta*w1(i)+cij))/(2*w1(i));
            M1t(i,j)= 1/(12*delta^2*w1(i)^3)*(32*cos(bij)*delta^3*w1(i)^3+...
                24*delta^2*sin(L*w1(i)-2*delta*w1(i)+cij)*w1(i)^2-...
                12*cos(L*w1(i)-2*delta*w1(i)+cij)*delta*w1(i)+...
                3*sin(L*w1(i)+ 2*delta*w1(i) + cij)-3*sin(L*w1(i)-2*delta*w1(i)+cij));
        end
        wij = w2(i)-w2(j);
        vij = w2(i)+w2(j);
        bij = b2(i)-b2(j);
        cij = b2(i)+b2(j);
        if wij ~= 0
            M2(i,j) = -(sin(1/2*vij*L+vij*delta+cij)*wij-sin(1/2*wij*L+wij*delta+bij)*vij...
                - sin(cij)*wij + sin(bij)*vij)/(vij*wij);
            M2t(i,j)= 1/(delta^2*wij^3*vij^3)*...
                (2*(2*sin(1/2*wij*L+wij*delta + bij)*delta^2*vij^3*wij^2-...
                2*sin(1/2*vij*L + vij*delta + cij)*delta^2*vij^2*wij^3+...
                2*cos(1/2*wij*L + wij*delta + bij)*delta*vij^3*wij-...
                2*cos(1/2*vij*L + vij*delta + cij)*delta*vij*wij^3-...
                vij^3*sin(1/2*wij*L+wij*delta+bij)+sin(1/2*vij*L+vij*delta+cij)*wij^3 +...
                vij^3*sin(1/2*wij*L-wij*delta+bij)-sin(1/2*vij*L-vij*delta+cij)*wij^3));
        else
            M2(i,j)=(cos(bij)*w2(i)*L+2*cos(bij)*w2(i)*delta+...
                sin(cij)-sin(L*w2(i)+2*delta*w2(i)+cij))/(2*w2(i));
            M2t(i,j)=-1/(12*delta^2*w2(i)^3)*(-32*cos(bij)*delta^3*w2(i)^3 +...
                24*delta^2*sin(L*w2(i)+ 2*delta*w2(i)+cij)*w2(i)^2 +...
                12*cos(L*w2(i)+2*delta*w2(i)+cij)*delta*w2(i) -...
                3*sin(L*w2(i)+2*delta*w2(i)+cij)+3*sin(L*w2(i)-2*delta*w2(i)+cij));
        end
        wij = w1(i)-w2(j);
        vij = w1(i)+w2(j);
        bij = b1(i)-b2(j);
        cij = b1(i)+b2(j);
        if wij ~= 0
            M12(i,j)= - 1/(delta^2*wij^3*vij^3)*...
                (2*(cos(1/2*wij*L + wij*delta + bij)*delta*vij^3*wij -...
                cos(1/2*vij*L + vij*delta + cij)*delta*vij*wij^3 + ...
                cos(1/2*wij*L - wij*delta + bij)*delta*vij^3*wij -...
                cos(1/2*vij*L - vij*delta + cij)*delta*vij*wij^3 -...
                vij^3*sin(1/2*wij*L+wij*delta+bij)+sin(1/2*vij*L+vij*delta+cij)*wij^3 + ...
                vij^3*sin(1/2*wij*L-wij*delta+bij)-sin(1/2*vij*L-vij*delta+cij)*wij^3));
        else
            M12(i,j)=1/(12*delta^2*w1(i)^3)*(16*cos(bij)*delta^3*w1(i)^3+...
                6*cos(L*w1(i)+2*delta*w1(i)+cij)*delta*w1(i)+...
                6*cos(L*w1(i)-2*delta*w1(i)+cij)*delta*w1(i)-...
                3*sin(L*w1(i)+2*delta*w1(i)+cij)+3*sin(L*w1(i)-2*delta*w1(i)+cij));
        end
    end
end
eig([M1+M1t M12; M12' M2+M2t])
cond([M1+M1t M12; M12' M2+M2t])